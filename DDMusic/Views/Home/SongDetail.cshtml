<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
<link rel="stylesheet" href="~/styleMusic.css">
@using Microsoft.AspNetCore.Identity
@using DDMusic.Areas.Admin.Models
@inject SignInManager<UserModel> SignInManager
@inject UserManager<UserModel> UserManager
<style>
    .lyrics {
        height: auto;
        max-height: 255px;
        overflow: hidden;
    }

    .img-song {
        width: 100px;
        height: 100px;
        border-radius: 10%;
    }

    .title-song {
        margin-top: 10px;
        margin-left: -120px;
    }

    .img-comment {
        width: 60px;
        height: 60px;
        border-radius: 12%;
    }

    .user-name {
        width: 100px;
        margin-left: 10px;
        margin-right: 10px;
        font-weight: 600 !important;
    }

    .user-comment {
        margin-left: 10px;
        font-weight: 400 !important;
    }

    .padding-comment {
        padding-bottom: 10px;
    }

    .comment {
        margin-left: -30px;
    }

    h4 {
        font-size: 40px;
    }

    h6 {
        font-weight: 500;
        letter-spacing: 1px;
    }

    .title-related-song {
        font-weight: 700;
        letter-spacing: 2px;
        text-transform: uppercase;
        font-size: 20px !important;
    }

    .m {
        max-height: 250px;
        border-radius: 15px;
        box-shadow: 0px 6px 15px var(--lightbshadow);
    }

    .cmt {
        display: none;
    }

    .css-icon {
        padding-top: 20px;
        float: right;
        font-size: 17px;
    }

    .lyr {
        padding-top: 20px;
    }

    .like {
        color: blue;
    }

    input:focus-visible {
        border: none !important;
        outline: none !important;
    }

    button:focus {
        outline: none !important;
    }
</style>
<div class="container section-padding-100-0">
    <div class="wrapper">
        <div class="row">
            <div class="col-lg-8">
                <div class="m">
                    <div class="song-details">
                        <div class="img-area">
                            <img src="" alt="">
                        </div>
                        <p class="name"></p>
                        <p class="artist"></p>

                    </div>
                    <div class="progress-area">
                        <div class="progress-bar">
                            <audio id="main-audio" src=""></audio>
                        </div>

                    </div>
                    <div class="song-timer">
                        <span class="current-time t">0:00</span>
                        <span class="max-duration k">0:00</span>
                    </div>
                    <div class="controls">
                        <i id="repeat-plist" class="material-icons t" title="Playlist looped">repeat</i>
                        <i id="prev" class="material-icons">skip_previous</i>
                        <div class="play-pause">
                            <i class="material-icons play">play_arrow</i>
                        </div>
                        <i id="next" class="material-icons d">skip_next</i>
                    </div>
                </div>
                <div class="css-icon">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <button id="checkLike" style="background-color:transparent;border:none"><i id="like-song" class="fa fa-thumbs-up"></i></button>
                    }
                    else
                    {
                        <button id="checkLikeUnsign" style="background-color:transparent;border:none"><i class="fa fa-thumbs-up"></i></button>
                    }
                    <t id="countLike"></t>
                    &ensp; <button id="downloadMusic" style="background-color:transparent;border:none">
                        <i class="fa fa-download" aria-hidden="true"></i> Tải nhạc
                    </button>
                    @*&ensp; <i class="fa fa-share-alt"></i> Chia sẻ &ensp;*@
                </div>
                <div class="lyr">
                    <h3>Lời bài hát</h3>

                    <p class="lyrics" id="lyrics"></p>
                </div>
                <div class="more_add" id="divMoreAddLyric">
                    <a href="javascript:;" id="seeMoreLyric" onclick="seeMoreLyric()" title="Xem toàn bộ" class="btn_view_more"><i class="fa fa-chevron-down"></i> Xem toàn bộ<span class="down"></span></a>
                    <a href="javascript:;" id="hideMoreLyric" onclick="hideMoreLyric()" title="Thu gọn" style="display:none" class="btn_view_hide hide"><i class="fa fa-chevron-up"></i> Thu gọn<span class="up"></span></a>

                </div>
            </div>
            <div class="col-lg-4">
                <div class="music-list">
                    <div class="header">
                        <div class="row">
                            <i class="list material-icons">queue_music</i>
                            <span>@ViewBag.Title</span>
                        </div>
                        <!-- <i id="close" class="material-icons" hidden="true">close</i> -->
                    </div>
                    <ul>
                        <!-- here li list are coming from js -->
                    </ul>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                @*<div class="section-heading white wow fadeInUp" data-wow-delay="100ms">*@
                @*<p>See what’s new</p>*@
                <h2>Bình luận</h2>
                @*</div>*@
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <!-- Contact Form Area -->
                <div class="login-form">

                    <div class="row">
                        <div class="col-md-6 col-lg-4">
                            <div class="form-group">
                                <input type="text" class="form-control" style="width:110%;" id="txtComment" placeholder="Bình luận">
                            </div>
                        </div>
                        <div class="col-md-6 col-lg-4">
                            <div class="form-group wow fadeInUp" data-wow-delay="200ms">
                                @if (SignInManager.IsSignedIn(User))
                                {
                                    <button class="btn btn-primary w-25" name="btnComment">Gửi</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary w-25" onclick="window.location.href='/Identity/Account/Register'">Gửi</button>
                                }
                            </div>
                        </div>
                    </div>
                    <br />
                    <p id="timeSong" value="0"></p>
                    <div id="commentlist">
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        window.onload = function () {
            var idSong = allMusic[musicIndex - 1].Id;
            $.ajax({
                type: 'get',
                url: '/Home/GetReactSong',
                dataType: 'html',
                data: {
                    "IdSong": idSong
                },
                success: function (data) {
                    if (data === "True") {
                        $("#like-song").addClass("like");
                    }
                    else {
                        $("#like-song").removeClass("like");
                    }
                }
            });
        }
        $("#downloadMusic").click(function () {
            var link = document.createElement('a');
            link.href = `../audio/${allMusic[musicIndex - 1].URLMusic}`;      
            link.download = allMusic[musicIndex - 1].URLMusic;
            link.dispatchEvent(new MouseEvent('click'));
        })
        $("#checkLike").click(function () {
            var idSong = allMusic[musicIndex - 1].Id;
            $.ajax({
                type: 'post',
                url: '/Home/ReactSong',
                dataType: 'html',
                data: {
                    "IdSong": idSong
                },
                success: function (data) {
                    if (data === "True") {
                        $("#like-song").addClass("like");
                    }
                    else {
                        $("#like-song").removeClass("like");
                    }
                }
            });
        })
        $("#checkLikeUnsign").click(function () {
            alert("Vui lòng đăng nhập để thích bài hát!");
        })

        const wrapper = document.querySelector(".wrapper"),
            musicImg = wrapper.querySelector(".img-area img"),
            musicName = wrapper.querySelector(".song-details .name"),
            musicLyrics = wrapper.querySelector(".lyrics"),
            musicView = wrapper.querySelector(".view"),
            musicId = wrapper.querySelector(".idSong"),
            musicArtist = wrapper.querySelector(".song-details .artist"),
            playPauseBtn = wrapper.querySelector(".play-pause"),
            prevBtn = wrapper.querySelector("#prev"),
            nextBtn = wrapper.querySelector("#next"),
            mainAudio = wrapper.querySelector("#main-audio"),
            progressArea = wrapper.querySelector(".progress-area"),
            progressBar = progressArea.querySelector(".progress-bar"),
            musicList = wrapper.querySelector(".music-list"),
            moreMusicBtn = wrapper.querySelector("#more-music"),
            closemoreMusic = musicList.querySelector("#close");
            countLike = 

        isMusicPaused = true;
        var allMusic = @Html.Raw(ViewBag.listSong);
        var musicIndex = 1;
        $(window).load(function () {
            loadMusic(musicIndex);
            playMusic();
            playingSong();
        });
        function addViewsSong(idSong) {
            $.ajax({
                type: 'get',
                url: '/Home/GetTimeSong',
                data: { 'idSong': idSong },
                success: function (data) {
                    console.log(data.timeSong)
                    setTimeout(function () {
                        $.ajax({
                            type: 'post',
                            url: '/Home/AddView',
                            data: { "idSong":idSong }
                        });
                    },data.timeSong);
                }
            });
        }
        function loadComment(idSong) {
            $.ajax({
                type: 'get',
                url: '/Home/LoadComment',
                dataType: 'html',
                data: {
                    "idSong": idSong
                },
                success: function (data) {
                    //     alert(data);
                    $("#commentlist").html(data);
                }
            });
        }
        function handleDisplaySeeAll() {
            document.getElementById("lyrics").className = "lyrics";
            $("a#seeMoreLyric").show();
            $("a#hideMoreLyric").hide();
            console.log($(".lyrics").height())
            if ($(".lyrics").height() < 255) {
                $("a#seeMoreLyric").hide();
            }
        }
        function loadMusic(indexNumb) {
            musicName.innerText = allMusic[indexNumb - 1].Name;
            musicLyrics.innerHTML = allMusic[indexNumb - 1].Lyric;
            musicArtist.innerText = allMusic[indexNumb - 1].Singer.Name;
            musicImg.src = `../img/song/${allMusic[indexNumb - 1].URLImg}`;
            mainAudio.src = `../audio/${allMusic[indexNumb - 1].URLMusic}`;
            //Load Like
            $('.countLike').text(allMusic[indexNumb - 1].CountLike);;
            //Load comment
            let idSong = allMusic[indexNumb - 1].Id;
            loadComment(idSong);
            //Add views song
            addViewsSong(idSong);
            handleDisplaySeeAll();
        }
        //play music function
        function playMusic() {
            wrapper.classList.add("paused");
            playPauseBtn.querySelector("i").innerText = "pause";
            mainAudio.play();
        }

        //pause music function
        function pauseMusic() {
            wrapper.classList.remove("paused");
            playPauseBtn.querySelector("i").innerText = "play_arrow";
            mainAudio.pause();
        }

        //prev music function
        function prevMusic() {
            musicIndex--; //decrement of musicIndex by 1
            //if musicIndex is less than 1 then musicIndex will be the array length so the last music play
            musicIndex < 1 ? musicIndex = allMusic.length : musicIndex = musicIndex;
            loadMusic(musicIndex);
            playMusic();
            playingSong();
        }

        //next music function
        function nextMusic() {
            musicIndex++; //increment of musicIndex by 1
            //if musicIndex is greater than array length then musicIndex will be 1 so the first music play
            musicIndex > allMusic.length ? musicIndex = 1 : musicIndex = musicIndex;
            loadMusic(musicIndex);
            playMusic();
            playingSong();
        }

        // play or pause button event
        playPauseBtn.addEventListener("click", () => {
            const isMusicPlay = wrapper.classList.contains("paused");
            //if isPlayMusic is true then call pauseMusic else call playMusic
            isMusicPlay ? pauseMusic() : playMusic();
            playingSong();
        });

        //prev music button event
        prevBtn.addEventListener("click", () => {
            prevMusic();
        });

        //next music button event
        nextBtn.addEventListener("click", () => {
            nextMusic();
        });

        // update progress bar width according to music current time
        mainAudio.addEventListener("timeupdate", (e) => {
            const currentTime = e.target.currentTime; //getting playing song currentTime
            const duration = e.target.duration; //getting playing song total duration
            let progressWidth = (currentTime / duration) * 100;
            progressBar.style.width = `${progressWidth}%`;

            let musicCurrentTime = wrapper.querySelector(".current-time"),
                musicDuartion = wrapper.querySelector(".max-duration");
            mainAudio.addEventListener("loadeddata", () => {
                // update song total duration
                let mainAdDuration = mainAudio.duration;
                let totalMin = Math.floor(mainAdDuration / 60);
                let totalSec = Math.floor(mainAdDuration % 60);
                if (totalSec < 10) { //if sec is less than 10 then add 0 before it
                    totalSec = `0${totalSec}`;
                }
                musicDuartion.innerText = `${totalMin}:${totalSec}`;
            });
            // update playing song current time
            let currentMin = Math.floor(currentTime / 60);
            let currentSec = Math.floor(currentTime % 60);
            if (currentSec < 10) { //if sec is less than 10 then add 0 before it
                currentSec = `0${currentSec}`;
            }
            musicCurrentTime.innerText = `${currentMin}:${currentSec}`;
        });

        // update playing song currentTime on according to the progress bar width
        progressArea.addEventListener("click", (e) => {
            let progressWidth = progressArea.clientWidth; //getting width of progress bar
            let clickedOffsetX = e.offsetX; //getting offset x value
            let songDuration = mainAudio.duration; //getting song total duration

            mainAudio.currentTime = (clickedOffsetX / progressWidth) * songDuration;
            playMusic(); //calling playMusic function
            playingSong();
        });

        //change loop, shuffle, repeat icon onclick
        const repeatBtn = wrapper.querySelector("#repeat-plist");
        repeatBtn.addEventListener("click", () => {
            let getText = repeatBtn.innerText; //getting this tag innerText
            switch (getText) {
                case "repeat":
                    repeatBtn.innerText = "repeat_one";
                    repeatBtn.setAttribute("title", "Song looped");
                    break;
                case "repeat_one":
                    repeatBtn.innerText = "shuffle";
                    repeatBtn.setAttribute("title", "Playback shuffled");
                    break;
                case "shuffle":
                    repeatBtn.innerText = "repeat";
                    repeatBtn.setAttribute("title", "Playlist looped");
                    break;
            }
        });

        //code for what to do after song ended
        mainAudio.addEventListener("ended", () => {
            // we'll do according to the icon means if user has set icon to
            // loop song then we'll repeat the current song and will do accordingly
            let getText = repeatBtn.innerText; //getting this tag innerText
            switch (getText) {
                case "repeat":
                    nextMusic(); //calling nextMusic function
                    break;
                case "repeat_one":
                    mainAudio.currentTime = 0; //setting audio current time to 0
                    loadMusic(musicIndex); //calling loadMusic function with argument, in the argument there is a index of current song
                    playMusic(); //calling playMusic function
                    break;
                case "shuffle":
                    let randIndex = Math.floor((Math.random() * allMusic.length) + 1); //genereting random index/numb with max range of array length
                    do {
                        randIndex = Math.floor((Math.random() * allMusic.length) + 1);
                    } while (musicIndex == randIndex); //this loop run until the next random number won't be the same of current musicIndex
                    musicIndex = randIndex; //passing randomIndex to musicIndex
                    loadMusic(musicIndex);
                    playMusic();
                    playingSong();
                    break;
            }
        });

        //show music list onclick of music icon
        //moreMusicBtn.addEventListener("click", ()=>{
        //  musicList.classList.toggle("show");
        //});
        //closemoreMusic.addEventListener("click", ()=>{
        //  moreMusicBtn.click();
        //});

        const ulTag = wrapper.querySelector("ul");
        // let create li tags according to array length for list
        for (let i = 0; i < allMusic.length; i++) {
            //let's pass the song name, artist from the array
            let liTag = `<li li-index="${i + 1}">
                            <div class="row">
                            <img class="im" src="../img/song/${allMusic[i].URLImg}">
                              <span>${allMusic[i].Name}  <p> ${allMusic[i].Singer.Name}</p></span>


                            </div>
                            <span id="${allMusic[i].URLMusic}" class="audio-duration"></span>
                            <audio class="${allMusic[i].URLMusic}" src="../audio/${allMusic[i].URLMusic}"></audio>
                          </li>`;
            ulTag.insertAdjacentHTML("beforeend", liTag); //inserting the li inside ul tag

            //let liAudioDuartionTag = ulTag.querySelector(`#${allMusic[i].URLMusic}`);
            //let liAudioTag = ulTag.querySelector(`.${allMusic[i].URLMusic}`);
            //liAudioTag.addEventListener("loadeddata", () => {
            //    let duration = liAudioTag.duration;
            //    let totalMin = Math.floor(duration / 60);
            //    let totalSec = Math.floor(duration % 60);
            //    if (totalSec < 10) { //if sec is less than 10 then add 0 before it
            //        totalSec = `0${totalSec}`;
            //    };
            //    liAudioDuartionTag.innerText = `${totalMin}:${totalSec}`; //passing total duation of song
            //    liAudioDuartionTag.setAttribute("t-duration", `${totalMin}:${totalSec}`); //adding t-duration attribute with total duration value
            //});
        }

        //play particular song from the list onclick of li tag
        function playingSong() {
            const allLiTag = ulTag.querySelectorAll("li");

            for (let j = 0; j < allLiTag.length; j++) {
                let audioTag = allLiTag[j].querySelector(".audio-duration");

                if (allLiTag[j].classList.contains("playing")) {
                    allLiTag[j].classList.remove("playing");
                    let adDuration = audioTag.getAttribute("t-duration");
                    audioTag.innerText = adDuration;
                }

                //if the li tag index is equal to the musicIndex then add playing class in it
                if (allLiTag[j].getAttribute("li-index") == musicIndex) {
                    allLiTag[j].classList.add("playing");
                    /*audioTag.innerText = "Playing";*/
                }

                allLiTag[j].setAttribute("onclick", "clicked(this)");
            }
        }

        //particular li clicked function
        function clicked(element) {
            let getLiIndex = element.getAttribute("li-index");
            musicIndex = getLiIndex; //updating current song index with clicked li index
            loadMusic(musicIndex);
            playMusic();
            playingSong();
        }

        function seeMoreLyric() {
            document.getElementById("lyrics").className = "";
            document.getElementById("seeMoreLyric").style.display = 'none';
            document.getElementById("hideMoreLyric").style.display = 'block';
        }
        function hideMoreLyric() {
            document.getElementById("lyrics").className = "lyrics";
            document.getElementById("seeMoreLyric").style.display = 'block';
            document.getElementById("hideMoreLyric").style.display = 'none';
        }
        $('button[name=btnComment]').click(function () {
            var txtComment = document.getElementById("txtComment").value;
            var idSong = allMusic[musicIndex - 1].Id;
            console.log(idSong)
            $.ajax({
                type: 'post',
                url: '/Home/AddComment',
                dataType: 'html',
                data: {
                    "txtComment": txtComment, "idSong": idSong
                },
                success: function (data) {
                    //     alert(data);
                    $("#commentlist").html(data);
                }
            });
        });
    </script>
}