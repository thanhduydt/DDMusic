<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
<link rel="stylesheet" href="~/styleMusic.css">
@using Microsoft.AspNetCore.Identity
@using DDMusic.Areas.Admin.Models
@inject SignInManager<UserModel> SignInManager
@inject UserManager<UserModel> UserManager
<style>
    .lyrics {
        padding-left:16px;
        height: auto;
        max-height: 255px;
        overflow: hidden;
    }

    .img-song {
        width: 100px;
        height: 100px;
        border-radius: 10%;
    }

    .title-song {
        margin-top: 10px;
        margin-left: -120px;
    }

    .img-comment {
        width: 45px;
        height: 45px;
        border-radius: 50%;
    }

    .user-name {
        width: 100px;
        margin-left: 10px;
        margin-right: 10px;
        font-weight: 600 !important;
    }

    .user-comment {
        margin-left: 10px;
        font-weight: 400 !important;
    }

    .padding-comment {
        padding-bottom: 10px;
    }

    .comment {
        margin-left: -44px;
    }

    h4 {
        font-size: 40px;
    }

    h6 {
        font-weight: 500;
        letter-spacing: 1px;
    }

    .title-related-song {
        font-weight: 700;
        letter-spacing: 2px;
        text-transform: uppercase;
        font-size: 20px !important;
    }
    hr {
        border-top: 1px solid #f8f9fa40;
    }
    .m {
        max-height: 250px;
        border-radius: 5px;
        /*box-shadow: 0px 6px 15px var(--lightbshadow);*/
        background:unset;
        border: 1px solid #f8f9fa40;
    }

    .cmt {
        display: none;
    }

    .css-icon {
        font-size: 17px;
        float: right;
        padding-top:10px;
    }

    .lyr {
        margin-top: 3px;
    }

    .like {
        color: #2e89ff !important;
    }

    input:focus-visible {
        border: none !important;
        outline: none !important;
    }

    button:focus {
        outline: none !important;
    }
    .u{
        float:left;
    }
    .input-comment {
        margin-left: 8px;
        border: none;
        border-bottom: 1px solid #f8f9fa40;
        background:unset;
    }
    .input-cmt {
        width: 100%;
        height: 28px;
        margin-left: -12px;
        border: none;
        background:unset;
        color:white;
    }
        
        .selection-comment{
            margin-top:-10px;
            float:right;
            display:none;
            position:relative;
        }
    .btn-close, .btn-comment {
        width: 85px;
        height: 35px;
        border-radius: 6px;
        color:white;
        border:none;
    }
    .btn-close {
        background-color: #5252dbc7;
    }
    .btn-comment {
        background-color: #1c1cbf;
    }
    .song-user {
        padding-top: 7px;
        padding-bottom: 28px;
    }
        .song-user img {
            width: 40px;
            height: 40px;
            border-radius: 25px;
            float: left;
        }
        .song-user .name-user {
            float: left;
            padding-left: 6px;
            color:white;
        }
    .user {
        color: #2e89ff;
    }
    .container {
        background-color: #000000bf;
    }
    h3,a,.c-white,t{
        color:white
    }
    .l {
        padding-left: 16px;
    }
    li .row{
        margin-left:unset;
    }
    .icon-lyric {
        color: #ffffffb5;
    }
    .background {
        background-image: url(../img/back3.jpg);
        background-attachment: fixed;
        padding-top: 80px;
        background-position:center;
    }
    .more_add{
        padding-left:10px;
    }
</style>
<div class="background">
<div class="container">
    <div class="wrapper">
        <div class="row">
            <div class="col-lg-8">
                <div class="m">
                    <div class="song-details">
                        <div class="img-area">
                            <img src="" alt="">
                        </div>
                        <p class="name"></p>
                        <p class="artist"></p>

                    </div>
                    <div class="progress-area">
                        <div class="progress-bar">
                            <audio id="main-audio" src=""></audio>
                        </div>

                    </div>
                    <div class="song-timer">
                        <span class="current-time t">0:00</span>
                        <span class="max-duration k">0:00</span>
                    </div>
                    <div class="controls">
                        <i id="repeat-plist" class="material-icons t" title="Phát lại tất cả">repeat</i>
                        <i id="prev" class="material-icons">skip_previous</i>
                        <div class="play-pause">
                            <i class="material-icons play">play_arrow</i>
                        </div>
                        <i id="next" class="material-icons d">skip_next</i>
                    </div>
                </div>
                <div class="song-user">
                    <div ><img src="~/img/logoMusic.jpg"/>
                    <div class="name-user">Cung cấp bởi<br /><div class="user" id="user"></div></div>
                    </div>
                    <div class="css-icon">
                        @if (SignInManager.IsSignedIn(User))
                        {
                            <button id="checkLike" style="background-color:transparent;border:none"><i id="like-song" class="fa fa-thumbs-up c-white"></i></button>
                        }
                        else
                        {
                            <button id="checkLikeUnsign" style="background-color:transparent;border:none"><i class="fa fa-thumbs-up c-white"></i></button>
                        }
                        <t id="likeCount"></t>
                        &ensp;
                        <button id="downloadMusic" style="background-color:transparent;border:none">
                            <i class="fa fa-download c-white" aria-hidden="true"> Tải nhạc</i>
                        </button>
                        &ensp;
                        <div class="dropdown" style="float:right">
                            <button style="background-color:transparent;border:none" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fa fa-share c-white" aria-hidden="true"> Chia sẻ</i>
                            </button>
                            <div class="dropdown-menu" style="background-color:unset" aria-labelledby="dropdownMenuButton">
                                <div class="shared-zalo"></div>
                            </div>
                        </div>
                        @*&ensp; <i class="fa fa-share-alt"></i> Chia sẻ &ensp;*@
                    </div>
                </div>
                <hr />
                <div class="lyr">
                    <h3>Lời bài hát</h3>

                    <p class="lyrics" id="lyrics"></p>
                </div>
                <div class="more_add" id="divMoreAddLyric">
                    <a href="javascript:;" id="seeMoreLyric" onclick="seeMoreLyric()" title="Xem toàn bộ" class="btn_view_more"><i class="fa fa-chevron-down" style="color: #ffffffb5"> Xem toàn bộ</i> <span class="down"></span></a>
                    <a href="javascript:;" id="hideMoreLyric" onclick="hideMoreLyric()" title="Thu gọn" style="display:none" class="btn_view_hide hide"><i class="fa fa-chevron-up" style="color: #ffffffb5"> Thu gọn</i> <span class="up"></span></a>

                </div>
            </div>
            <div class="col-lg-4">
                <div class="music-list">
                    <div class="header">
                        <div class="row">
                            <i class="list material-icons c-white">queue_music</i>
                            <span class="c-white">@ViewBag.Title</span>
                        </div>
                        <!-- <i id="close" class="material-icons" hidden="true">close</i> -->
                    </div>
                    <ul>
                        <!-- here li list are coming from js -->
                    </ul>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                @*<div class="section-heading white wow fadeInUp" data-wow-delay="100ms">*@
                @*<p>See what’s new</p>*@
                <h3>Bình luận</h3>
                @*</div>*@
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <!-- Contact Form Area -->
                <div class="login-form">

                    <div class="row">
                        @*<div class="col-md-6 col-lg-4">*@

                        @*<div class="col-12">*@
                            @*<div class="u"><img class="img-comment" src="~/img/user-img/1.jpg" alt="" /></div>*@

                            @*<input type="text" class="form-control" style="width:110%;" id="txtComment" placeholder="Bình luận">
            </div>*@
                            @*</div>*@
                            @*<div class="col-md-6 col-lg-4">
            <div class="form-group wow fadeInUp" data-wow-delay="200ms">*@
                            @*<div class="input-comment u"> <img class="img-comment" src="~/img/user-img/1.jpg" alt="" /><input/></div>

                        </div>*@
                        <div class="col-8">
                            <label class="sr-only" for="inlineFormInputGroup">Username</label> <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <div>
                                        @if (SignInManager.IsSignedIn(User)&&UserManager.GetUserAsync(User).Result.URLImg!=null)
                                        {
                                            <img class="img-comment" src="~/img/user-img/@UserManager.GetUserAsync(User).Result.URLImg" alt="" />
                                        }
                                        else
                                        {
                                            <img class="img-comment" src="~/img/iconComment.jpg" alt="" />
                                        }
                                    </div>
                                </div>
                                <div class="form-control input-comment" id="inlineFormInputGroup">
                                    @if (SignInManager.IsSignedIn(User))
            {
                                    <input type="text" placeholder="Bình luận" onclick="checkLogin(1)" id="txtComment" class="input-cmt" />
            }
            else
            {
                                    <input type="text" placeholder="Bình luận" onclick="checkLogin(0)" id="txtComment" class="input-cmt" />
            }
                                        
                                </div>
                            </div>
                            <div id="selection" class="selection-comment">
                            <button id="btnClose" class="btn-close">Hủy</button>
                            <button id="btnComment" name="btnComment" class="btn-comment">Bình luận</button>
                               </div>
                        </div>    
                        </div>
                
                    <p id="timeSong" value="0"></p>
                    <div id="commentlist">
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
    </div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>
    function GetReactSong(idSong) {
        $.ajax({
            type: 'get',
            url: '/Home/GetReactSong',
            dataType: 'html',
            data: {
                "IdSong": idSong
            },
            success: function (data) {
                if (data === "True") {
                    $("#like-song").addClass("like");
                }
                else {
                    $("#like-song").removeClass("like");
                }
            }
        });
    }
    function likeCount(idSong) {
                 $.get('@Url.Action("LikeCount","Home")', { idSong: idSong }, function (data) {
                            $("#likeCount").html(data);
                        });
    }
        $("#downloadMusic").click(function () {
            var link = document.createElement('a');
            link.href = `../audio/${allMusic[musicIndex - 1].URLMusic}`;
            link.download = allMusic[musicIndex - 1].URLMusic;
            link.dispatchEvent(new MouseEvent('click'));
        })
        $("#checkLike").click(function () {
            var idSong = allMusic[musicIndex - 1].Id;
            $.ajax({
                type: 'post',
                url: '/Home/ReactSong',
                dataType: 'html',
                data: {
                    "IdSong": idSong
                },
                success: function (data) {
                    if (data === "True") {
                        $("#like-song").addClass("like");
                    }
                    else {
                        $("#like-song").removeClass("like");
                    }
                    likeCount(idSong);
                }
            });

        })
        $("#checkLikeUnsign").click(function () {
            alert("Vui lòng đăng nhập để thích bài hát!");
        })

        const wrapper = document.querySelector(".wrapper"),
            musicImg = wrapper.querySelector(".img-area img"),
            musicName = wrapper.querySelector(".song-details .name"),
            musicLyrics = wrapper.querySelector(".lyrics"),
            musicUser = wrapper.querySelector(".user"),
            musicView = wrapper.querySelector(".view"),
            musicId = wrapper.querySelector(".idSong"),
            musicArtist = wrapper.querySelector(".song-details .artist"),
            playPauseBtn = wrapper.querySelector(".play-pause"),
            prevBtn = wrapper.querySelector("#prev"),
            nextBtn = wrapper.querySelector("#next"),
            mainAudio = wrapper.querySelector("#main-audio"),
            progressArea = wrapper.querySelector(".progress-area"),
            progressBar = progressArea.querySelector(".progress-bar"),
            musicList = wrapper.querySelector(".music-list"),
            moreMusicBtn = wrapper.querySelector("#more-music"),
        closemoreMusic = musicList.querySelector("#close");

        isMusicPaused = true;
        var allMusic = @Html.Raw(ViewBag.listSong);
        var musicIndex = 1;
        $(window).load(function () {
            loadMusic(musicIndex);
            playMusic();
            playingSong();
        });
        function addViewsSong(idSong) {
            $.ajax({
                type: 'get',
                url: '/Home/GetTimeSong',
                data: { 'idSong': idSong },
                success: function (data) {
                    console.log(data.timeSong)
                    setTimeout(function () {
                        $.ajax({
                            type: 'post',
                            url: '/Home/AddView',
                            data: { "idSong":idSong }
                        });
                    },data.timeSong);
                }
            });
        }
        function loadComment(idSong) {
            $.ajax({
                type: 'get',
                url: '/Home/LoadComment',
                dataType: 'html',
                data: {
                    "idSong": idSong
                },
                success: function (data) {
                    //     alert(data);
                    $("#commentlist").html(data);
                }
            });
        }
        function handleDisplaySeeAll() {
            document.getElementById("lyrics").className = "lyrics";
            $("a#seeMoreLyric").show();
            $("a#hideMoreLyric").hide();
            console.log($(".lyrics").height())
            if ($(".lyrics").height() < 255) {
                $("a#seeMoreLyric").hide();
            }
        }
        function loadMusic(indexNumb) {
            musicName.innerText = allMusic[indexNumb - 1].Name;
            musicLyrics.innerHTML = allMusic[indexNumb - 1].Lyric;          
            musicArtist.innerText = allMusic[indexNumb - 1].Singer.Name;
            musicImg.src = `../img/song/${allMusic[indexNumb - 1].URLImg}`;
            mainAudio.src = `../audio/${allMusic[indexNumb - 1].URLMusic}`;
            if (allMusic[indexNumb - 1].User!=null&&allMusic[indexNumb - 1].User.UserName != null) {
                musicUser.innerHTML = allMusic[indexNumb - 1].User.UserName;
            } else {
                musicUser.innerHTML = "DDMusic";
            }
            wrapper.querySelector(".shared-zalo").innerHTML = "<div class='zalo-share-button' data-href="+"https://localhost:44305/bai-hat/" + allMusic[indexNumb - 1].Id+" data-oaid='579745863508352884' data-layout='1' data-color='blue' data-customize='false' ></div >"
            let idSong = allMusic[indexNumb - 1].Id;
            //Load Like
            likeCount(idSong);
            GetReactSong(idSong);
            //Load comment
            loadComment(idSong);
            //Add views song
            addViewsSong(idSong);
            handleDisplaySeeAll();
        }
        //play music function
        function playMusic() {
            wrapper.classList.add("paused");
            playPauseBtn.querySelector("i").innerText = "pause";
            mainAudio.play();
        }

        //pause music function
        function pauseMusic() {
            wrapper.classList.remove("paused");
            playPauseBtn.querySelector("i").innerText = "play_arrow";
            mainAudio.pause();
        }

        //prev music function
        function prevMusic() {
            musicIndex--; //decrement of musicIndex by 1
            //if musicIndex is less than 1 then musicIndex will be the array length so the last music play
            musicIndex < 1 ? musicIndex = allMusic.length : musicIndex = musicIndex;
            loadMusic(musicIndex);
            playMusic();
            playingSong();
        }

        //next music function
        function nextMusic() {
            musicIndex++; //increment of musicIndex by 1
            //if musicIndex is greater than array length then musicIndex will be 1 so the first music play
            musicIndex > allMusic.length ? musicIndex = 1 : musicIndex = musicIndex;
            loadMusic(musicIndex);
            playMusic();
            playingSong();
        }

        // play or pause button event
        playPauseBtn.addEventListener("click", () => {
            const isMusicPlay = wrapper.classList.contains("paused");
            //if isPlayMusic is true then call pauseMusic else call playMusic
            isMusicPlay ? pauseMusic() : playMusic();
            playingSong();
        });

        //prev music button event
        prevBtn.addEventListener("click", () => {
            prevMusic();
        });

        //next music button event
        nextBtn.addEventListener("click", () => {
            nextMusic();
        });

        // update progress bar width according to music current time
        mainAudio.addEventListener("timeupdate", (e) => {
            const currentTime = e.target.currentTime; //getting playing song currentTime
            const duration = e.target.duration; //getting playing song total duration
            let progressWidth = (currentTime / duration) * 100;
            progressBar.style.width = `${progressWidth}%`;

            let musicCurrentTime = wrapper.querySelector(".current-time"),
                musicDuartion = wrapper.querySelector(".max-duration");
            mainAudio.addEventListener("loadeddata", () => {
                // update song total duration
                let mainAdDuration = mainAudio.duration;
                let totalMin = Math.floor(mainAdDuration / 60);
                let totalSec = Math.floor(mainAdDuration % 60);
                if (totalSec < 10) { //if sec is less than 10 then add 0 before it
                    totalSec = `0${totalSec}`;
                }
                musicDuartion.innerText = `${totalMin}:${totalSec}`;
            });
            // update playing song current time
            let currentMin = Math.floor(currentTime / 60);
            let currentSec = Math.floor(currentTime % 60);
            if (currentSec < 10) { //if sec is less than 10 then add 0 before it
                currentSec = `0${currentSec}`;
            }
            musicCurrentTime.innerText = `${currentMin}:${currentSec}`;
        });

        // update playing song currentTime on according to the progress bar width
        progressArea.addEventListener("click", (e) => {
            let progressWidth = progressArea.clientWidth; //getting width of progress bar
            let clickedOffsetX = e.offsetX; //getting offset x value
            let songDuration = mainAudio.duration; //getting song total duration

            mainAudio.currentTime = (clickedOffsetX / progressWidth) * songDuration;
            playMusic(); //calling playMusic function
            playingSong();
        });

        //change loop, shuffle, repeat icon onclick
        const repeatBtn = wrapper.querySelector("#repeat-plist");
        repeatBtn.addEventListener("click", () => {
            let getText = repeatBtn.innerText; //getting this tag innerText
            switch (getText) {
                case "repeat":
                    repeatBtn.innerText = "repeat_one";
                    repeatBtn.setAttribute("title", "Phát lại một bài");
                    break;
                case "repeat_one":
                    repeatBtn.innerText = "shuffle";
                    repeatBtn.setAttribute("title", "Phát ngẫu nhiên");
                    break;
                case "shuffle":
                    repeatBtn.innerText = "repeat";
                    repeatBtn.setAttribute("title", "Phát lại tất cả");
                    break;
            }
        });

        //code for what to do after song ended
        mainAudio.addEventListener("ended", () => {
            // we'll do according to the icon means if user has set icon to
            // loop song then we'll repeat the current song and will do accordingly
            let getText = repeatBtn.innerText; //getting this tag innerText
            switch (getText) {
                case "repeat":
                    nextMusic(); //calling nextMusic function
                    break;
                case "repeat_one":
                    mainAudio.currentTime = 0; //setting audio current time to 0
                    loadMusic(musicIndex); //calling loadMusic function with argument, in the argument there is a index of current song
                    playMusic(); //calling playMusic function
                    break;
                case "shuffle":
                    let randIndex = Math.floor((Math.random() * allMusic.length) + 1); //genereting random index/numb with max range of array length
                    do {
                        randIndex = Math.floor((Math.random() * allMusic.length) + 1);
                    } while (musicIndex == randIndex); //this loop run until the next random number won't be the same of current musicIndex
                    musicIndex = randIndex; //passing randomIndex to musicIndex
                    loadMusic(musicIndex);
                    playMusic();
                    playingSong();
                    break;
            }
        });

        //show music list onclick of music icon
        //moreMusicBtn.addEventListener("click", ()=>{
        //  musicList.classList.toggle("show");
        //});
        //closemoreMusic.addEventListener("click", ()=>{
        //  moreMusicBtn.click();
        //});

        const ulTag = wrapper.querySelector("ul");
        // let create li tags according to array length for list
        for (let i = 0; i < allMusic.length; i++) {
            //let's pass the song name, artist from the array
            let liTag = `<li li-index="${i + 1}">
                            <div class="row">
                            <img class="im" src="../img/song/${allMusic[i].URLImg}">
                              <span>${allMusic[i].Name}<p> ${allMusic[i].Singer.Name}</p></span>
                            </div>
                            <span id="${allMusic[i].URLMusic}" class="audio-duration"></span>
                            <audio class="${allMusic[i].URLMusic}" src="../audio/${allMusic[i].URLMusic}"></audio>
                          </li>`;
            ulTag.insertAdjacentHTML("beforeend", liTag); //inserting the li inside ul tag

            //let liAudioDuartionTag = ulTag.querySelector(`#${allMusic[i].URLMusic}`);
            //let liAudioTag = ulTag.querySelector(`.${allMusic[i].URLMusic}`);
            //liAudioTag.addEventListener("loadeddata", () => {
            //    let duration = liAudioTag.duration;
            //    let totalMin = Math.floor(duration / 60);
            //    let totalSec = Math.floor(duration % 60);
            //    if (totalSec < 10) { //if sec is less than 10 then add 0 before it
            //        totalSec = `0${totalSec}`;
            //    };
            //    liAudioDuartionTag.innerText = `${totalMin}:${totalSec}`; //passing total duation of song
            //    liAudioDuartionTag.setAttribute("t-duration", `${totalMin}:${totalSec}`); //adding t-duration attribute with total duration value
            //});
        }

        //play particular song from the list onclick of li tag
        function playingSong() {
            const allLiTag = ulTag.querySelectorAll("li");

            for (let j = 0; j < allLiTag.length; j++) {
                let audioTag = allLiTag[j].querySelector(".audio-duration");

                if (allLiTag[j].classList.contains("playing")) {
                    allLiTag[j].classList.remove("playing");
                    let adDuration = audioTag.getAttribute("t-duration");
                    audioTag.innerText = adDuration;
                }

                //if the li tag index is equal to the musicIndex then add playing class in it
                if (allLiTag[j].getAttribute("li-index") == musicIndex) {
                    allLiTag[j].classList.add("playing");
                    /*audioTag.innerText = "Playing";*/
                }

                allLiTag[j].setAttribute("onclick", "clicked(this)");
            }
        }

        //particular li clicked function
        function clicked(element) {
            let getLiIndex = element.getAttribute("li-index");
            musicIndex = getLiIndex; //updating current song index with clicked li index
            loadMusic(musicIndex);
            playMusic();
            playingSong();
        }

        function seeMoreLyric() {
            document.getElementById("lyrics").className = "l";
            document.getElementById("seeMoreLyric").style.display = 'none';
            document.getElementById("hideMoreLyric").style.display = 'block';
        }
        function hideMoreLyric() {
            document.getElementById("lyrics").className = "lyrics";
            document.getElementById("seeMoreLyric").style.display = 'block';
            document.getElementById("hideMoreLyric").style.display = 'none';
        }
        $('button[name=btnComment]').click(function () {
            var txtComment = document.getElementById("txtComment").value;
            var idSong = allMusic[musicIndex - 1].Id;
            console.log(idSong)
            $.ajax({
                type: 'post',
                url: '/Home/AddComment',
                dataType: 'html',
                data: {
                    "txtComment": txtComment, "idSong": idSong
                },
                success: function (data) {
                    //     alert(data);
                    $("#commentlist").html(data);
                }
            });
            $('#selection').css("display", "none");
            $('#txtComment').val("");
        });
    $('#btnClose').click(function () {
        $('#selection').css("display","none");
    });
    function checkLogin(t) {
    if (t == 1) {
        $('#selection').css("display", "block");
    }
    else {
        alert("Vui lòng đăng nhập!")
    }
    }
</script>
}