// <auto-generated />
using System;
using DDMusic.Areas.Admin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DDMusic.Migrations
{
    [DbContext(typeof(DPContext))]
    [Migration("20211114174157_IntitalCreate")]
    partial class IntitalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.AlbumModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdSinger")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnsigned")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdSinger");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accept")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdSong");

                    b.HasIndex("IdUser");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.CountNewAccountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CountNewAccount");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.PlaylistDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPlaylist")
                        .HasColumnType("int");

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPlaylist");

                    b.HasIndex("IdSong");

                    b.ToTable("PlaylistDetail");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ReactSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("React")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdSong");

                    b.HasIndex("IdUser");

                    b.ToTable("ReactSong");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.SingerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnsigned")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Singer");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.SingerOfSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdSinger")
                        .HasColumnType("int");

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSinger");

                    b.HasIndex("IdSong");

                    b.ToTable("SingerOfSong");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.SongModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accept")
                        .HasColumnType("bit");

                    b.Property<int>("CountLike")
                        .HasColumnType("int");

                    b.Property<int>("CountView")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdAlbum")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Lyric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSinger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnsigned")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUnsignedSinger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("URLImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URLMusic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAlbum");

                    b.HasIndex("IdUser");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.TopSongOnMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimeRestart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TopSongOnMonth");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.TopSongOnMonthDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("IdTopSongOnMonth")
                        .HasColumnType("int");

                    b.Property<int>("Top")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSong");

                    b.HasIndex("IdTopSongOnMonth");

                    b.ToTable("TopSongOnMonthDetail");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.TopSongOnWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimeRestart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TopSongOnWeek");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.TopSongOnWeekDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("IdTopSongOnWeek")
                        .HasColumnType("int");

                    b.Property<int>("Top")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSong");

                    b.HasIndex("IdTopSongOnWeek");

                    b.ToTable("TopSongOnWeekDetail");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("URLImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ViewSongOfDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ViewSongOfDay");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ViewSongOfDayDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountView")
                        .HasColumnType("int");

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("IdViewSongOfDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSong");

                    b.HasIndex("IdViewSongOfDay");

                    b.ToTable("ViewSongOfDayDetail");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ViewSongOfMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ViewSongOfMonth");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ViewSongOfMonthDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountView")
                        .HasColumnType("int");

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("IdViewSongOfMonth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSong");

                    b.HasIndex("IdViewSongOfMonth");

                    b.ToTable("ViewSongOfMonthDetail");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ViewSongOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ViewSongOfWeek");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ViewSongOfWeekDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountView")
                        .HasColumnType("int");

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("IdViewSongOfWeek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSong");

                    b.HasIndex("IdViewSongOfWeek");

                    b.ToTable("ViewSongOfWeekDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.AlbumModel", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.SingerModel", "Singer")
                        .WithMany()
                        .HasForeignKey("IdSinger");

                    b.Navigation("Singer");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.CommentModel", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("IdSong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.Playlist", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.PlaylistDetail", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.Playlist", "PlayList")
                        .WithMany()
                        .HasForeignKey("IdPlaylist")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("IdSong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayList");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ReactSong", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("IdSong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.SingerOfSong", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.SingerModel", "Singer")
                        .WithMany()
                        .HasForeignKey("IdSinger")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("IdSong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Singer");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.SongModel", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.AlbumModel", "Album")
                        .WithMany()
                        .HasForeignKey("IdAlbum");

                    b.HasOne("DDMusic.Areas.Admin.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.TopSongOnMonthDetail", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("IdSong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.TopSongOnMonth", "TopSongOnMonth")
                        .WithMany()
                        .HasForeignKey("IdTopSongOnMonth")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("TopSongOnMonth");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.TopSongOnWeekDetail", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("IdSong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.TopSongOnWeek", "TopSongOnWeek")
                        .WithMany()
                        .HasForeignKey("IdTopSongOnWeek")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("TopSongOnWeek");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ViewSongOfDayDetail", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("IdSong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.ViewSongOfDay", "ViewSongOfDay")
                        .WithMany()
                        .HasForeignKey("IdViewSongOfDay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("ViewSongOfDay");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ViewSongOfMonthDetail", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("IdSong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.ViewSongOfMonth", "ViewSongOfMonth")
                        .WithMany()
                        .HasForeignKey("IdViewSongOfMonth")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("ViewSongOfMonth");
                });

            modelBuilder.Entity("DDMusic.Areas.Admin.Models.ViewSongOfWeekDetail", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("IdSong")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.ViewSongOfWeek", "ViewSongOfWeek")
                        .WithMany()
                        .HasForeignKey("IdViewSongOfWeek")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("ViewSongOfWeek");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDMusic.Areas.Admin.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DDMusic.Areas.Admin.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
